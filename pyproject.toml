[build-system]
requires = ["setuptools >= 61.0"]
build-backend = "setuptools.build_meta"

[project]
name = "socket-sdk-python"
dynamic = ["version"]
requires-python = ">= 3.9"
dependencies = [
    'requests'
]
readme = "README.rst"
license = {file = "LICENSE"}
description = "Socket Security Python SDK"
keywords = ["socketsecurity", "socket.dev", "sca", "oss", "security", "sdk"]
authors = [
    {name = "Douglas Coburn", email = "douglas@socket.dev"}
]
maintainers = [
    {name = "Douglas Coburn", email = "douglas@socket.dev"}
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: 3.14"
]

# modern, faster linter and language server. install with `pip install -e ".[dev]"`
[project.optional-dependencies]
dev = [
    "ruff>=0.3.0",
]

[project.urls]
Homepage = "https://github.com/socketdev/socket-sdk-python"

[tool.setuptools.packages.find]
include = [
    "socketdev",
    "socketdev.core",
    "socketdev.dependencies",
    "socketdev.export",
    "socketdev.fullscans",
    "socketdev.npm",
    "socketdev.openapi",
    "socketdev.org",
    "socketdev.purl",
    "socketdev.quota",
    "socketdev.report",
    "socketdev.repos",
    "socketdev.repositories",
    "socketdev.sbom",
    "socketdev.settings",
    "socketdev.tools",
]

[tool.setuptools.dynamic]
version = {attr = "socketdev.__version__"}

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
]

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
select = ["E4", "E7", "E9", "F"]
ignore = []

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = false

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"